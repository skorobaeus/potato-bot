// Import the discord.js module
const Discord = require('discord.js');

// Create an instance of a Discord client
const client = new Discord.Client();

// Functions
const giveReaction = async (message, amount, reactionsArray) => {
    await message.channel.messages.fetch({ limit: 2 })
          .then(messages => {
            let mArray = messages.array();
            while (amount !== 0) {
              let random = Math.floor(Math.random() * reactionsArray.length);
              mArray[mArray.length - 1].react(reactionsArray[random]);
              amount--;
            }
            })
          .catch(error => console.log(`Couldn't fetch messages because of: ${error}`));
          message.delete();
}


/**
 * The ready event is vital, it means that only _after_ this will your bot start reacting to information
 * received from Discord
 */
client.on('ready', () => {
  console.log('I am ready!');
  //console.log(client);
});


// Create an event listener for messages
client.on('message', async message => {
  
  //COMMANDS
  if (message.content.toLowerCase() === '!help') {
    message.channel.send(`!bot ‚Äî Ich bin Kartoffel
!love ‚Äî –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π, –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –≤—ã—à–µ —Å—Ç–∞–≤–∏—Ç 3 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–º–∞–π–ª–∏–∫–∞ —Å —Å–µ—Ä–¥–µ—á–∫–∞–º–∏
!outrage ‚Äî -//- —Å –Ω–µ–¥–æ–≤–æ–ª—å–Ω—ã–º–∏ –º–æ—Ä–¥–∞–º–∏
!cry ‚Äî -//- —Å–æ —Å–ª–µ–∑–∞–º–∏
!omg ‚Äî -//- —Å —É–¥–∏–≤–ª–µ–Ω–Ω—ã–º–∏ –ª–∏—Ü–∞–º–∏
!ping ‚Äî –ø–æ—Å—á–∏—Ç–∞–µ—Ç –ø–∏–Ω–≥. –ù–µ –∑–Ω–∞—é –∑–∞—á–µ–º, –ø—Ä–æ—Å—Ç
!count —Å–ª–æ–≤–æ ‚Äî –ø–æ—Å—á–∏—Ç–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞ –Ω–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö (–µ–µ–µ–µ)
–∫—Ç–æ –º–æ–ª–æ–¥–µ—Ü? ‚Äî —Å–∫–∞–∂–µ—Ç, —á—Ç–æ —Å–ø—Ä–æ—Å–∏–≤—à–∏–π –º–æ–ª–æ–¥–µ—Ü
–∫—Ç–æ —Ö–æ—Ä–æ—à–∏–π –º–∞–ª—å—á–∏–∫? ‚Äî —Å–∫–∞–∂–µ—Ç, —á—Ç–æ –æ–Ω`);
  }   
  
  if (message.content.toLowerCase() === '!bot' && !message.author.bot) {
    message.channel.send('Ich bin Kartoffel');
  }  
  
  if (message.content.toLowerCase() === '!love' && !message.author.bot) {
    giveReaction(message, 3, ['üòç', 'üòò', 'üòç', 'üòò', 'üíñ', 'üíï', '‚ù§', 'üíú', 'üòª', 'üòΩ']);
  }   
  
  if (message.content.toLowerCase() === '!outrage' && !message.author.bot) {
    giveReaction(message, 3, ['üëø', 'üò°', 'üë∫', 'üò§', 'üò†']);
  }
  
  if (message.content.toLowerCase() === '!cry' && !message.author.bot) {
    giveReaction(message, 3, ['üòü', 'üò®', 'üò∞', 'üò•', 'üò¢', 'üò≠', 'üòñ', 'üò£', 'üòû']);
  }

  if (message.content.toLowerCase() === '!omg' && !message.author.bot) {
    giveReaction(message, 3, ['üôÄ', 'üôà', 'üò±', 'üòÆ', 'üòØ']);
  }
   
  if(message.content.toLowerCase() === "!ping" && !message.author.bot) {
    const m = await message.channel.send("Ping?");
    m.edit(`Pong! Latency is ${m.createdTimestamp - message.createdTimestamp}ms. Client latency is ${client.ws.ping}ms.`);
  }  
    
  if (message.content.toLowerCase().includes('!count') && !message.author.bot) {
    const sought = message.content.substring(message.content.indexOf('!count') + 6).trim().toLowerCase();
    
    const fetchAll = async (channel) => {
      let fetchinPromise = new Promise(async (resolve, reject) => {

        const fetchedMessages = [];  
        let fetchingLimit = 99;
        let fetchingBefore = channel.lastMessageID;

        while (fetchingLimit == 99) {
          await channel.messages.fetch({ limit: fetchingLimit, before: fetchingBefore})
            .then(messages => {
              messages.each(singleMessage => fetchedMessages.push(singleMessage.content));
              fetchingBefore = messages.last().id;
              if (messages.array().length < fetchingLimit) {
                fetchingLimit = messages.array().length;
                resolve({array: fetchedMessages, lookinFor: sought, channelName: channel.name});
              }
            })
            .catch(error => {
              console.log(`Couldn't fetch messages because of: ${error}`)
              reject(error);
            }); 
        }      
      });

      fetchinPromise
        .then(
          result => {
            let counted = result.array.filter(singleMessage => singleMessage.toLowerCase().includes(result.lookinFor));
            message.channel.send(`–ò—Å–∫–∞–ª —Å–ª–æ–≤–æ ${result.lookinFor} —Å—Ä–µ–¥–∏ ${result.array.length} —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∫–∞–Ω–∞–ª–µ #${result.channelName}, –Ω–∞—à—ë–ª —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${counted.length}`);
          },
          error => console.log(`Rejected because of: ` + error)
        )
    }
    
    message.client.channels.each(singleChannel => {
      if (singleChannel.type == 'text') {
       fetchAll(singleChannel);   
      }
    });    
  }
  
  //CHATTING
  if (message.content.toLowerCase().includes('–∫—Ç–æ –º–æ–ª–æ–¥–µ—Ü?') && !message.author.bot) {
    message.channel.send(`–¢—ã –º–æ–ª–æ–¥–µ—Ü, <@${message.author.id}>!`);
    message.react('üòç')
      .then(console.log(`Liked that: ${message.content}`))
      .catch(console.error);
  }
  
  if (message.content.toLowerCase().includes('–∫—Ç–æ —Ö–æ—Ä–æ—à–∏–π –º–∞–ª—å—á–∏–∫') && !message.author.bot) {
    message.channel.send(`–Ø —Ö–æ—Ä–æ—à–∏–π –º–∞–ª—å—á–∏–∫! üòä`);
    message.react('üòä')
      .then(console.log(`Liked that: ${message.content}`))
      .catch(console.error);
  }
  
  if (message.content.toLowerCase().includes('–∫–æ—Ñ–µ') || message.content.toLowerCase().includes('—Å–ø–∞—Ç—å —Ö–æ') || message.content.toLowerCase().includes('—Ö–æ—á—É —Å–ø–∞—Ç—å') || message.content.toLowerCase().includes('—Ö–æ—á–µ—Ç—Å—è —Å–ø–∞—Ç') || message.content.toLowerCase().includes('—É—Ç—Ä–æ') || message.content.toLowerCase().includes('—É—Ç—Ä–∞')) {
        
    let foodArray = ['ü•ê', 'üßÄ', 'ü•û', 'üç≥', 'üç∞', 'üç©'];
    let foodRandom = Math.floor(Math.random() * 6);   
    console.log(foodRandom);
    
    let coffeeArray = ['‚òï', 'üçµ', 'ü•õ'];
    let coffeeRandom = Math.floor(Math.random() * 3); 
    console.log(coffeeRandom);
    
    message.react(foodArray[foodRandom])
      .then(console.log(`Liked that: ${message.content}`))
      .catch(console.error);    
    
    message.react(coffeeArray[coffeeRandom])
      .then(console.log(`Liked that: ${message.content}`))
      .catch(console.error);
  }
  
  if (message.content.toLowerCase().includes('–∫–∞—Ä—Ç–æ—Ñ–µ–ª') || message.content.toLowerCase().includes('–∫–∞—Ä—Ç–æ—à–∫') || message.content.toLowerCase().includes('–∫–∞—Ä—Ç–æ—Ö') || message.content.toLowerCase().includes('potato')) {
    message.react('ü•î')
      .then(console.log(`Liked that: ${message.content}`))
      .catch(console.error);
  }   
  
  if (message.content.toLowerCase().includes('–ø–∏—Ü—Ü')) {
    message.react('üçï')
      .then(console.log(`Liked that: ${message.content}`))
      .catch(console.error);
  }   
  
  if(message.content.toLowerCase() === "what is love") {
    message.channel.send("BABY DON'T HURT ME");
    message.channel.awaitMessages(message => message.content.includes("DON'T HURT ME"))
      .then(got => {console.log(got.last());
                      got.last().channel.send("NO MORE")})
      .catch(got => console.log(Error));   
  }
  
  if (message.content.toLowerCase().includes('–ø–∏—É')) {
    message.channel.send('–í–∂—É—Ö!');
  }
});

// Log our bot in using the token from https://discordapp.com/developers/applications/me
client.login(process.env.BOT_TOKEN);