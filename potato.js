// Import the discord.js module
const Discord = require('discord.js');
//const config = require('./auth.json');

// Create an instance of a Discord client
const client = new Discord.Client();

// Functions
const giveReaction = async (message, amount, reactionsArray) => {
    await message.channel.messages.fetch({ limit: 2 })
          .then(messages => {
            let mArray = messages.array();
            while (amount !== 0) {
              let random = Math.floor(Math.random() * reactionsArray.length);
              mArray[mArray.length - 1].react(reactionsArray[random]);
              amount--;
            }
            })
          .catch(error => console.log(`Couldn't fetch messages because of: ${error}`));
          message.delete();
}

const bDaysData = [
  {name: 'wizjer', day: new Date('June 30'), cheered: 0},
  {name: 'sabrus', day: new Date('October 31'), cheered: 0},
  {name: 'Alex Lather', day: new Date('February 14'), cheered: 0},
  {name: 'Emberiza', day: new Date('April 28'), cheered: 0},
  {name: 'Miraks', day: new Date('July 31'), cheered: 0},
  {name: 'Potato-bot', day: new Date('July 11'), cheered: 0}
]

function checkCheers() {
  bDaysData.forEach(bDayData => {
    if ((bDayData.day.getMonth() < new Date().getMonth()) || (bDayData.day.getMonth() == new Date().getMonth() && bDayData.day.getDate() < new Date().getDate())) {
      bDayData.cheered = 1;
    }
  });
  console.log(bDaysData);
}

/**
 * The ready event is vital, it means that only _after_ this will your bot start reacting to information
 * received from Discord
 */
client.on('ready', () => {
  console.log('I am ready!');
  checkCheers();
  //console.log(client);
});


// Create an event listener for messages
client.on('message', async message => {
  
  let today = new Date(message.createdTimestamp);
  if (!bDaysData.some(bDayData => new Date(bDayData.day).getMonth() === today.getMonth())) {
      return;
  } else {
    bDaysData.forEach(bDayData => {
      if (bDayData.day.getMonth() === today.getMonth() && bDayData.day.getDate() === today.getDate() && !bDayData.cheered) {
        if (bDayData.name !== 'Potato-bot') {
          message.channel.send(`–°–µ–≥–æ–¥–Ω—è (–ø–æ –º–æ–∏–º –Ω–µ–æ–±—ä—è—Å–Ω–∏–º—ã–º —á–∞—Å–∞–º) –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è ${bDayData.name}! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é –æ—Ç –ª–∏—Ü–∞ –≤—Å–µ—Ö —Ä–æ–±–æ—Ç–æ–≤ –∏ –∫–∞—Ä—Ç–æ—Ñ–µ–ª–∏–Ω, –∏ –∂–µ–ª–∞—é, —á—Ç–æ–±—ã —Ç–≤–æ–π –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–≥—Ä–µ–≤–∞–ª—Å—è, –∞ –±–ª—é–¥–∞ –∏–∑ –∫–∞—Ä—Ç–æ—à—å–∫–∏ –≤—Å–µ–≥–¥–∞ –±—ã–ª–∏ –≤–∫—É—Å–Ω–µ–Ω—å–∫–∏–º–∏ :3`);            
        } else {
          message.channel.send(`–ê —É –º–µ–Ω—è —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è :3`);
        }
        bDayData.cheered = 1;
      }
    });
  }
  
  //COMMANDS
  if (message.content.toLowerCase() === '!help') {
    message.channel.send(`!bot ‚Äî Ich bin Kartoffel
!love ‚Äî –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π, –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –≤—ã—à–µ —Å—Ç–∞–≤–∏—Ç 3 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–º–∞–π–ª–∏–∫–∞ —Å —Å–µ—Ä–¥–µ—á–∫–∞–º–∏
!outrage ‚Äî -//- —Å –Ω–µ–¥–æ–≤–æ–ª—å–Ω—ã–º–∏ –º–æ—Ä–¥–∞–º–∏
!cry ‚Äî -//- —Å–æ —Å–ª–µ–∑–∞–º–∏
!omg ‚Äî -//- —Å —É–¥–∏–≤–ª–µ–Ω–Ω—ã–º–∏ –ª–∏—Ü–∞–º–∏
!lol ‚Äî -//- —Å –±—É–≥–∞–≥–∞—à–∫–∞–º–∏
!ping ‚Äî –ø–æ—Å—á–∏—Ç–∞–µ—Ç –ø–∏–Ω–≥. –ù–µ –∑–Ω–∞—é –∑–∞—á–µ–º, –ø—Ä–æ—Å—Ç
!count —Å–ª–æ–≤–æ ‚Äî –ø–æ—Å—á–∏—Ç–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞ –Ω–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö (–µ–µ–µ–µ)
–∫—Ç–æ –º–æ–ª–æ–¥–µ—Ü? ‚Äî —Å–∫–∞–∂–µ—Ç, —á—Ç–æ —Å–ø—Ä–æ—Å–∏–≤—à–∏–π –º–æ–ª–æ–¥–µ—Ü
–∫—Ç–æ —Ö–æ—Ä–æ—à–∏–π –º–∞–ª—å—á–∏–∫? ‚Äî —Å–∫–∞–∂–µ—Ç, —á—Ç–æ –æ–Ω`);
  }   
  
  if (message.content.toLowerCase() === '!bot' && !message.author.bot) {
    message.channel.send('Ich bin Kartoffel');
    console.log(message.author);
    console.log(message.content.length);
  }
  
  if (message.content.length >= 150 && Math.round(Math.random()) == 1) {
    message.channel.send(`–•–æ—Ä–æ—à–æ —Å–∫–∞–∑–∞–Ω–æ, ${message.author.username}!`);
  }
  
  if (message.content.toLowerCase() === '!love' && !message.author.bot) {
    giveReaction(message, 3, ['üòç', 'üòò', 'üòç', 'üòò', 'üíñ', 'üíï', '‚ù§', 'üíú', 'üòª', 'üòΩ']);
  }   
  
  if (message.content.toLowerCase() === '!outrage' && !message.author.bot) {
    giveReaction(message, 3, ['üëø', 'üò°', 'üë∫', 'üò§', 'üò†', message.guild.emojis.get('572080324981293066'), message.guild.emojis.get('575710002187206686')]);
  }
  
  if (message.content.toLowerCase() === '!cry' && !message.author.bot) {
    giveReaction(message, 3, ['üòü', 'üò®', 'üò∞', 'üò•', 'üò¢', 'üò≠', 'üòñ', 'üò£', 'üòû']);
  }

  if (message.content.toLowerCase() === '!omg' && !message.author.bot) {
    giveReaction(message, 3, ['üôÄ', 'üôà', 'üò±', 'üòÆ', 'üòØ', message.guild.emojis.get('572080651704991771'), message.guild.emojis.get('575702079373443099'), message.guild.emojis.get('600204266170220545')]);
  }
  
  if (message.content.toLowerCase() === '!lol' && !message.author.bot) {
    giveReaction(message, 3, ['üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ']);
  }  
   
  if(message.content.toLowerCase() === "!ping" && !message.author.bot) {
    const m = await message.channel.send("Ping?");
    m.edit(`Pong! Latency is ${m.createdTimestamp - message.createdTimestamp}ms. Client latency is ${client.ws.ping}ms.`);
  }  
    
  if (message.content.toLowerCase().includes('!count') && !message.author.bot) {
    const sought = message.content.substring(message.content.indexOf('!count') + 6).trim().toLowerCase();
    
    const fetchAll = async (channel) => {
      let fetchinPromise = new Promise(async (resolve, reject) => {

        const fetchedMessages = [];  
        let fetchingLimit = 99;
        let fetchingBefore = channel.lastMessageID;

        while (fetchingLimit == 99) {
          await channel.messages.fetch({ limit: fetchingLimit, before: fetchingBefore})
            .then(messages => {
              messages.each(singleMessage => fetchedMessages.push(singleMessage.content));
              fetchingBefore = messages.last().id;
              if (messages.array().length < fetchingLimit) {
                fetchingLimit = messages.array().length;
                resolve({array: fetchedMessages, lookinFor: sought, channelName: channel.name});
              }
            })
            .catch(error => {
              console.log(`Couldn't fetch messages because of: ${error}`)
              reject(error);
            }); 
        }      
      });

      fetchinPromise
        .then(
          result => {
            let counted = result.array.filter(singleMessage => singleMessage.toLowerCase().includes(result.lookinFor));
            message.channel.send(`–ò—Å–∫–∞–ª —Å–ª–æ–≤–æ ${result.lookinFor} —Å—Ä–µ–¥–∏ ${result.array.length} —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∫–∞–Ω–∞–ª–µ #${result.channelName}, –Ω–∞—à—ë–ª —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${counted.length}`);
          },
          error => console.log(`Rejected because of: ` + error)
        )
    }
    
    message.client.channels.each(singleChannel => {
      if (singleChannel.type == 'text') {
       fetchAll(singleChannel);   
      }
    });    
  }
  
  //CHATTING & REACTING  
  if (message.content.toLowerCase().includes('–∫—Ç–æ –º–æ–ª–æ–¥–µ—Ü?') && !message.author.bot) {
    message.channel.send(`–¢—ã –º–æ–ª–æ–¥–µ—Ü, <@${message.author.id}>!`);
    message.react('üòç')
      .then(console.log(`Liked that: ${message.content}`))
      .catch(console.error);
  }
  
  if (message.content.toLowerCase().includes('–∫—Ç–æ —Ö–æ—Ä–æ—à–∏–π –º–∞–ª—å—á–∏–∫') && !message.author.bot) {
    message.channel.send(`–Ø —Ö–æ—Ä–æ—à–∏–π –º–∞–ª—å—á–∏–∫! üòä`);
    message.react('üòä')
      .then(console.log(`Liked that: ${message.content}`))
      .catch(console.error);
  }
  
  if (message.content.toLowerCase().includes('–∫–æ—Ñ–µ') || message.content.toLowerCase().includes('—Å–ø–∞—Ç—å —Ö–æ') || message.content.toLowerCase().includes('—Ö–æ—á—É —Å–ø–∞—Ç—å') || message.content.toLowerCase().includes('—Ö–æ—á–µ—Ç—Å—è —Å–ø–∞—Ç') || message.content.toLowerCase().includes('—É—Ç—Ä–æ') || message.content.toLowerCase().includes('—É—Ç—Ä–∞') || message.content.toLowerCase() === '—É—Ç—Ä') {
        
    let foodArray = ['ü•ê', 'üßÄ', 'ü•û', 'üç≥', 'üç∞', 'üç©'];
    let foodRandom = Math.floor(Math.random() * 6);   
    console.log(foodRandom);
    
    let coffeeArray = ['‚òï', 'üçµ', 'ü•õ'];
    let coffeeRandom = Math.floor(Math.random() * 3); 
    console.log(coffeeRandom);
    
    message.react(foodArray[foodRandom])
      .then(console.log(`Liked that: ${message.content}`))
      .catch(console.error);    
    
    message.react(coffeeArray[coffeeRandom])
      .then(console.log(`Liked that: ${message.content}`))
      .catch(console.error);
  }
  
  if (message.content.toLowerCase().includes('–∫–∞—Ä—Ç–æ—Ñ–µ–ª') || message.content.toLowerCase().includes('–∫–∞—Ä—Ç–æ—à–∫') || message.content.toLowerCase().includes('–∫–∞—Ä—Ç–æ–ø–ª') || message.content.toLowerCase().includes('–∫–∞—Ä—Ç–æ—Ö') || message.content.toLowerCase().includes('potato')) {
    message.react('ü•î')
      .then(console.log(`Liked that: ${message.content}`))
      .catch(console.error);
  }   
  
  if (message.content.toLowerCase().includes('–ø–∏—Ü—Ü')) {
    message.react('üçï')
      .then(console.log(`Liked that: ${message.content}`))
      .catch(console.error);
  }   
    
  if (message.content.toLowerCase().includes('–ø–∏—É')) {
    message.channel.send('–í–∂—É—Ö!');
  }
});

// Log our bot in using the token from https://discordapp.com/developers/applications/me
client.login(process.env.BOT_TOKEN);
//client.login(config.token);